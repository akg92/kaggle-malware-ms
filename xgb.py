from xgboost import XGBClassifier
from sklearn.metrics import roc_auc_score, auc,make_scorer,accuracy_score, classification_report
from sklearn.model_selection import  GridSearchCV
import pandas as pd
import gc
from sklearn.model_selection import train_test_split
import pickle
data_dir = './data'
test_file = data_dir+'/test.csv'
train_file = data_dir+'/train.csv'
target = 'HasDetections'


cols =['MachineIdentifier','ProductName','EngineVersion','AppVersion','AvSigVersion','IsBeta','RtpStateBitfield','IsSxsPassiveMode','DefaultBrowsersIdentifier','AVProductStatesIdentifier','AVProductsInstalled','AVProductsEnabled','HasTpm','CountryIdentifier','CityIdentifier','OrganizationIdentifier','GeoNameIdentifier','LocaleEnglishNameIdentifier','Platform','Processor','OsVer','OsBuild','OsSuite','OsPlatformSubRelease','OsBuildLab','SkuEdition','IsProtected','AutoSampleOptIn','PuaMode','SMode','IeVerIdentifier','SmartScreen','Firewall','UacLuaenable','Census_MDC2FormFactor','Census_DeviceFamily','Census_OEMNameIdentifier','Census_OEMModelIdentifier','Census_ProcessorCoreCount','Census_ProcessorManufacturerIdentifier','Census_ProcessorModelIdentifier','Census_ProcessorClass','Census_PrimaryDiskTotalCapacity','Census_PrimaryDiskTypeName','Census_SystemVolumeTotalCapacity','Census_HasOpticalDiskDrive','Census_TotalPhysicalRAM','Census_ChassisTypeName','Census_InternalPrimaryDiagonalDisplaySizeInInches','Census_InternalPrimaryDisplayResolutionHorizontal','Census_InternalPrimaryDisplayResolutionVertical','Census_PowerPlatformRoleName','Census_InternalBatteryType','Census_InternalBatteryNumberOfCharges','Census_OSVersion','Census_OSArchitecture','Census_OSBranch','Census_OSBuildNumber','Census_OSBuildRevision','Census_OSEdition','Census_OSSkuName','Census_OSInstallTypeName','Census_OSInstallLanguageIdentifier','Census_OSUILocaleIdentifier','Census_OSWUAutoUpdateOptionsName','Census_IsPortableOperatingSystem','Census_GenuineStateName','Census_ActivationChannel','Census_IsFlightingInternal','Census_IsFlightsDisabled','Census_FlightRing','Census_ThresholdOptIn','Census_FirmwareManufacturerIdentifier','Census_FirmwareVersionIdentifier','Census_IsSecureBootEnabled','Census_IsWIMBootEnabled','Census_IsVirtualDevice','Census_IsTouchEnabled','Census_IsPenCapable','Census_IsAlwaysOnAlwaysConnectedCapable','Wdft_IsGamer','Wdft_RegionIdentifier','HasDetections']
def cross_validate(X,Y):

    param_grid = [{
        'n_estimator':[100,125,150,200], 'max_depth':[3,4,5]
    }]

    scoring = {'AUC':'roc_acu','Accuracy':make_scorer(accuracy_score)}
    clf =  GridSearchCV(XGBClassifier(),param_grid,cv=5,scoring=scoring,refit='AUC',n_jobs=3,verbose=1)
    clf.fit(X,Y)
    return clf


def get_train_test():

    temp_cols = list(cols).append(target)
    df = pd.read_csv(train_file,names=cols)
    Y = df[target]
    df.drop(target,axis=1,inplace=True)
    return train_test_split(X,Y)

def get_test_file():
    return pd.read_csv(test_file,names=cols)



def create_metrics(Y,prediction):
    roc = roc_auc_score(Y,prediction)

    print('roc=={}'.format(roc))
    report = classification_report(Y,prediction)

    print('===============REPORT=========================')
    print(report)

def train_test():
    train_X, test_X, train_Y, test_Y = get_train_test()
    clf = cross_validate(train_X,train_Y)
    model = clf.best_estimator_
    with open('model.model') as f:
        pickle.dump(model,f)
    prediction = model.predict(test_X)
    prediction = [x[0] for x in prediction]
    create_metrics(test_Y,prediction)



if  __name__=='__main__':
    train_test()


